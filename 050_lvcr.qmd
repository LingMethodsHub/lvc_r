---
title: "Doing it all again, but `tidy`"
date: "`r Sys.Date()`"
license: "CC-BY-SA 4.0"
format: 
  html: default
  pdf: default
author:
  - name:
      given: Matt Hunt
      family: Gardner
    orcid: 0000-0002-1878-4232
    email: matt.gardner@ling-phil.ox.ac.uk
    corresponding: true
    affiliations:
      - name: University of Oxford 
        department: Linguistics, Philology, & Phonetics
        city: Oxford
        country: UK
description: "Modifying data, but using the `tidyverse`"
---
```{r}
#| echo: false
source("renv/activate.R")
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy='styler', tidy.opts=list(strict=TRUE, scope="tokens"), tidy = TRUE)
```

```{r include=FALSE}
td <- read.delim("Data/deletiondata.txt")

# Subset data to remove previous "Vowel" contexts
td <- td[td$Before != "Vowel",]
td$Before <-factor(td$Before)
# Re-code "H" to be "Consonant" in a new column
td$After.New <- td$After
td$After.New[td$After.New == "H"] <- "Consonant"
td$After.New <- factor(td$After.New)
# Center Year of Birth
td$Center.Age <- as.numeric(scale(td$YOB, scale = FALSE))
# Create Age.Group
td$Age.Group[td$YOB >1979] <- "Young"
td$Age.Group[td$YOB >1944 & td$YOB <1980] <- "Middle"
td$Age.Group[td$YOB <1945] <- "Old"
td$Age.Group <-factor(td$Age.Group, levels = c("Young", "Middle", "Old"))
# Combine Age and Sex
td$Age_Sex <- factor(paste(td$Age.Group, td$Sex, sep ="_"))
# Break Phoneme.Dep.Var into two columns
library(dplyr)
td <- mutate(td, Phoneme = sub("^(.)(--.*)$", "\\1", Phoneme.Dep.Var), Dep.Var.Full = sub("^(.--)(.*)$", "\\2", Phoneme.Dep.Var), Phoneme.Dep.Var = NULL)
td$Phoneme <-factor(td$Phoneme)
td$Dep.Var.Full <- factor(td$Dep.Var.Full)	
# Create three partitions based on Age.Group
td.young <- droplevels(subset(td, Age.Group == "Young"))
td.middle <- droplevels(subset(td, Age.Group == "Middle"))
td.old <- droplevels(subset(td, Age.Group == "Old"))
# Re-center Center.Age
td.young$Center.Age <- scale(td.young$YOB, scale = FALSE)
td.middle$Center.Age <- scale(td.middle$YOB, scale = FALSE)
td.old$Center.Age <- scale(td.old$YOB, scale = FALSE)
```

## Doing It All Again, But `tidy`

The package `dplyr` is part of a larger "universe" of *R* packages called `tidyverse`. This collection of packages is specifically focused on data science and offers some shortcuts that are useful to learn. The packages that make up the `tidyverse` are `dplyr`, `ggplot2`, `purr`, `tibble`, `tidyr`, `stingr`, `readr`, and `forcats`, among others. Throughout this guide I try to use the most basic *R* syntax for accomplishing a task. This way you learn how *R* works. I will also show how to complete the same task using packages from the `tidyverse`. Using the `tidyverse` methods is usually optional --- though once you get the hang of it, you might always use the `tidyverse` methods.

```{r eval=FALSE}
# Install the tidyverse package
install.packages("tidyverse")
```

```{r message=FALSE,warning=FALSE }
# Load the tidyverse package
library(tidyverse)
```

```{r}
# List the packages loaded by the tidyverse package
tidyverse_packages()
```

Before we get started with the `tidyverse`, there are two important new things to learn about. The first is the pipe operator `%>%` and the second is the the alternative to a *data frame* called a *tibble*.

### The Pipe %\>%

The pipe operator `%>%`[^1] is introduced by the `magrittr` package[^2] and it is extremely useful. The pipe operator passes the output of a function to the first argument of the next function, which mean you can chain several steps together.

[^1]: Not to be confused with the operator `|`, which means "or" and whose symbol is also called "pipe".

[^2]: Loading `dplyr` will also let you use it.

For example, lets find the mean year of birth in our data.[^3] We already know that when the pre-vowel contexts are removed, the mean year of birth is 1969.

[^3]: If you don't have the `td` dataset loaded in *R*, go back to the [Interim Summary](%22050_lvcr.qmd%22) and run the code.

```{r}
# Find mean YOB using mean() function
mean(td$YOB)
# Find the mean YOB by piping the td data to the mean() function
td$YOB %>% mean()
```

The functionality of `%>%` might seem trivial at this point; however, when you need to perform multiple tasks sequentially, it saves a lot of time and space when writing your code.

### Tibbles

A *tibble* is an updated version of a *data frame*. *Tibbles* keep the features that have stood the test of time, and drop the features that used to be convenient but are now frustrating (i.e. converting character vectors to factors). For our purposes, the difference between the two is negligible, but you should be aware that *tibbles* look a bit different from *data frames*.

```{r,attr.output='style="max-height: 500px;"', R.options = list(width = 1000)}
as.data.frame(td)
```

```{r,attr.output='style="max-height: 500px;"', R.options = list(width = 1000)}
as_tibble(td)
```

Notice that the *tibble* lists the dimensions of the tibble at the top, as well as the class of each of the columns. It also only displays the first 10 rows. You'll also notice that the row numbers have reset when we converted `td` to a *tibble*. If we want to view the entire tibble, we can use the `print()` function and specify the `n=` plus the number of rows we want to see, including all rows (`n=Inf`). You can see below how the pipe operator makes doing this pretty easy.

```{r, eval=FALSE}
# Embedding functions
print(as_tibble(td), n=20)
```

The above produces the same as the following:

```{r,attr.output='style="max-height: 500px;"', R.options = list(width = 1000)}
# Using %>% to pass the results from the first function to the second function
as_tibble(td)%>%
  print(n=20)
```

### Getting a `glimpse()`

Another useful addition to data exploration is the `glimpse()` function from the `pilllar` package and re-exported by `dplyr`. The `glipmpse()` function is like a cross between `print()` (which shows the data) and `str()` (which shows the structure of the data). I use `glimpse()` almost as frequently as I use `summary()`. In fact, if you have very wide data, i.e., with lots of columns, `glimpse()` may prove more useful than `summary()` for getting a quick snapshot of your data. `glimpse()` shows the number of rows, the number of columns, the name of each column, its class, and however many values in each column as will fit horizontally in the console.

```{r}
glimpse(td)
```

### Manipulating data with `dplyr`

The `dplyr` package is great for manipulating data in a data frame/tibble. Some common things that `diplyr` can do include:

| Function      | Description                               |
|---------------|-------------------------------------------|
| `mutate()`    | add new variables or modify existing ones |
| `select()`    | select variables                          |
| `filter()`    | filter                                    |
| `summarize()` | summarize/reduce                          |
| `arrange()`   | sort                                      |
| `group_by()`  | group                                     |
| `rename()`    | rename columns                            |

Lets redo all our data manipulation of `td` but with `dplyr` and its pipe `%>%` operator

```{r eval=TRUE}
# Read in token file
td <- read.delim("Data/deletiondata.txt")
```

or...

```{r eval=FALSE}
# Read in token file
td <- read.delim("https://www.dropbox.com/s/jxlfuogea3lx2pu/deletiondata.txt?dl=1")
```

then...

```{r}
# Subset data to remove previous 'Vowel' contexts
td <- td %>% # pass td to next function
      filter(Before != "Vowel") # filter td to include everything that is not "Vowel" in the column Before
# Re-code 'H' to be 'Consonant' in a new column
td <- td %>% # pass td to next function
      mutate(After.New = recode(After, "H" = "Consonant")) # create a new column called After.New that equals a re-code of After in which H is re-coded as Consonant
# Center Year of Birth
td <- td %>% # pass td to next function
     mutate(Center.Age = as.numeric(scale(YOB, scale = FALSE))) # create a new column called Center.Age equal to the YOB column but scaled
# Create Age.Group
td <- td %>% # pass td to next function
      mutate(Age.Group = cut(YOB, breaks = c(-Inf, 1944, 1979, Inf), 
                                  labels = c("Old", "Middle", "Young"))) # cut the YOB into discrete categories. 
```

Before we continue, a note about the `cut()` function. The `breaks=` option is a concatenated list of boundaries. It should start and end with `-Inf` and `Inf` (negative and positive infinity) as these will be the lower and upper bounds. The other values are the boundaries or cut-off points. By default `cut()` has the setting `right=TRUE`, which means the boundary values are considered the last value in a group (e.g., rightmost value). Above, this means `1944` will be the highest value in the `Old` category and `1979` will the the highest value in the `Middle` category. To reverse this you can add the option `right=FALSE` in which case 1944 would be the lowest value in the `Middle` category (e.g. leftmost value) and 1979 would be the lowest value in the `Young` category.

Let's continue.

```{r, tidy=FALSE}
# Combine Age and Sex

td <-td %>% # pass td to next function
     unite("Age_Sex", Age.Group:Sex, sep= "_", remove = FALSE) # using the unite() function from the tidyr package, if remove=TRUE the original Age.Group and Sex columns will be deleted
    
# Break Phoneme.Dep.Var into two columns
td <-td %>% # pass td to next function
 mutate(Phoneme = sub("^(.)(--.*)$", "\\1", 
        Phoneme.Dep.Var), 
        Dep.Var.Full = sub("^(.--)(.*)$", "\\2", 
        Phoneme.Dep.Var), 
        Phoneme.Dep.Var = NULL) # Same as before, but with td passed to mutate() by the %>% operator

```

At this point we have done everything except partition the data and re-center YOB in the partitioned data frames. You may ask, "How is this better?". Well, the answer is that because all these modifications feed into one another, we can actually include them all together in one serialized operation. Behold!

All of the above code can be simplified as follows:

```{r echo=FALSE}
td <- read.delim("Data/deletiondata.txt")
```

or...

```{r eval=FALSE}
# Read in token file
td <- read.delim("https://www.dropbox.com/s/jxlfuogea3lx2pu/deletiondata.txt?dl=1")
```

then...

```{r, tidy=TRUE}
# Subset data to remove previous 'Vowel' contexts, then modify several columns with mutate, then convert any character column to a factor column
td <- td %>%
      filter(Before != "Vowel")%>%
      mutate(After.New = recode(After, "H" = "Consonant"),  
             Center.Age = as.numeric(scale(YOB, scale = FALSE)),
             Age.Group = cut(YOB, breaks = c(-Inf, 1944, 1979, Inf), 
                                  labels = c("Old", "Middle", "Young")),
             Phoneme = sub("^(.)(--.*)$", "\\1", Phoneme.Dep.Var),
             Dep.Var.Full = sub("^(.--)(.*)$", "\\2", Phoneme.Dep.Var),
             Phoneme.Dep.Var = NULL)%>%
      mutate_if(is.character, as.factor)
  
```

Now, doesn't the above look so much cleaner and easier to follow?

To partition the data we still need separate functions. Also, remember to re-centre any continuous variables after partioning.

```{r}
td.young <- td %>% 
            filter(Age.Group == "Young")%>%
            mutate(Center.Age = as.numeric(scale(YOB, scale = FALSE)))

td.middle <- td %>% 
             filter(Age.Group == "Middle")%>%
             mutate(Center.Age = as.numeric(scale(YOB, scale = FALSE)))

td.old <- td %>% 
          filter(Age.Group == "Old")%>%
          mutate(Center.Age = as.numeric(scale(YOB, scale = FALSE)))
```
